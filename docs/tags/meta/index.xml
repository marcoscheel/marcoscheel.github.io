<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meta on Marco Scheel aka GeekDotNet</title>
    <link>/tags/meta/</link>
    <description>Fr√ºher SharePoint. Heute Microsoft 365 Modern Collaboration. Co-Host of Hairless in the cloud.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Oct 2020 19:53:06 +0200</lastBuildDate><atom:link href="/tags/meta/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My blog has moved - From Tumblr to Hugo on GitHub Pages</title>
      <link>/post/2020/10/20201011-my-blog-has-moved/</link>
      <pubDate>Sun, 11 Oct 2020 19:53:06 +0200</pubDate>
      
      <guid>/post/2020/10/20201011-my-blog-has-moved/</guid>
      <description>&lt;p&gt;My blog now has a new home. It is no longer hosted on Tumblr.com and it is now hosted on GitHub Pages. The main reason to get of Tumblr is the poor image handling. The overall experience was OK. I liked the editor and best of all it is all free including running on your own domain! Having my own name was a key driver. I was running my blog on my own v-server back in the days. I tried a lot of platforms (blogger.com, wordpress.com and prior Tumblr I ran on a &amp;ldquo;self&amp;rdquo; hosted wordpress instance). The only constant was and will be my RSS hosting. Believe it our not I&amp;rsquo;m still running Feedburner from Google. One service that is still not (yet?) killed by search giant (RIP Google Reader). With all the previous choises there was also on driving factor: &lt;strong&gt;I&amp;rsquo;m cheap, can I get it for free? Yes and it will stay 100% free for you and me!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today is the day I switched to a static website! It is 2020 and the hipster way to go. So what does it take to run a blog on a static stite generator?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A static site generator: &lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A place to host the source files: &lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A place to host the generated website: &lt;a href=&#34;https://pages.github.com&#34;&gt;https://pages.github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A method to publish after I commited a new blog post: This but later &lt;a href=&#34;https://github.com/features/actions&#34;&gt;https://github.com/features/actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Main benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Still free&lt;/li&gt;
&lt;li&gt;I own my content 100%&lt;/li&gt;
&lt;li&gt;Better image handling (high-resh with zoom)&lt;/li&gt;
&lt;li&gt;Better inline code handling and highlighting&lt;/li&gt;
&lt;li&gt;Learning new stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo&#34;&gt;HUGO&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;/img/20201011-my-blog-has-moved-hugo--logo-wide.svg&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Why &lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; and not &lt;a href=&#34;https://jekyllrb.com/&#34; target=&#34;_blank&#34;&gt;Jekyll&lt;/a&gt;? Because there are blogs out there that I&amp;rsquo;m reading and I liked the idea of being one of them :) Who?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Andrew Connell: &lt;a href=&#34;https://www.andrewconnell.com/blog/hosting-hugo-on-azure&#34;&gt;https://www.andrewconnell.com/blog/hosting-hugo-on-azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maximilian Melcher: &lt;a href=&#34;https://melcher.dev/2017/11/bye-bye-wordpress-hello-hugo&#34;&gt;https://melcher.dev/2017/11/bye-bye-wordpress-hello-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matthew McDermott: &lt;a href=&#34;https://www.ableblue.com/blog/archive/2019/02/20/learning-hugo-on-azure-part-1&#34;&gt;https://www.ableblue.com/blog/archive/2019/02/20/learning-hugo-on-azure-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jason Hand: &lt;a href=&#34;https://dev.to/jasonhand/10-tips-for-building-and-deploying-hugo-websites-on-azure-static-web-apps-307l&#34;&gt;https://dev.to/jasonhand/10-tips-for-building-and-deploying-hugo-websites-on-azure-static-web-apps-307l&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aaron Wislang: &lt;a href=&#34;https://www.aaronmsft.com/posts/static-sites-hugo-azure-cloudflare&#34;&gt;https://www.aaronmsft.com/posts/static-sites-hugo-azure-cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is even content on Microsoft Docs on hosting Hugo on Azure Static Websites: &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/static-web-apps/publish-hugo&#34;&gt;https://docs.microsoft.com/en-us/azure/static-web-apps/publish-hugo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was easy to start. Just follow the steps on the &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34;&gt;Getting started&lt;/a&gt; using &lt;a href=&#34;https://gohugo.io/getting-started/installing#chocolatey-windows&#34; target=&#34;_blank&#34;&gt;choco installation for Windows users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve choosen the &lt;a href=&#34;https://github.com/amzrk2/hugo-theme-fuji/&#34; target=&#34;_blank&#34;&gt;Fuji theme&lt;/a&gt; as a great staring point and integrated it as a git submodule. As mentioned in the docs I copied the settings into my config.toml and I was ready to go.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new post/hugo/2020/10/my-blog-has-moved.md
hugo server -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open localhost:1313 in your browser of choice and check the result.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;/img/20201011-my-blog-has-moved-hugo--hugo-server.jpg&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;my-tweeks&#34;&gt;My tweeks&lt;/h3&gt;
&lt;p&gt;To get result in the picture above I needed some tweeks. Also some other settings are notable if you are like me :)&lt;/p&gt;
&lt;p&gt;The choosen theme is not very colorful and I really wanted a site image. I&amp;rsquo;m sure it is my missing knowledge about hugo and theming but I ended up messing this the CSS to get a header image. I&amp;rsquo;ve put a classic CSS file in my &amp;ldquo;static/css&amp;rdquo; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;header {
    background-image: url(/bg-skate-2020.jpg);
    background-size: cover;
}

body header a {
    color: #ffffff;
    white-space: normal;
}

body header .title-sub{
    color: #ffffff;
    white-space: normal;
}

body .markdown-body strong{
    color: #000000;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To integrate this into your theme we use partials. To not mess with my theme (it is a submodule and controlled by the original author) I had to copy the &amp;ldquo;head.html&amp;rdquo; from my theme into &amp;ldquo;layouts/_partials&amp;rdquo; and I added the link to my CSS at the end of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;...
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/disqusjs@1.3/dist/disqusjs.css&amp;quot; /&amp;gt;
{{ end }}
{{ partial &amp;quot;analytic-gtag.html&amp;quot; . }}
{{ partial &amp;quot;analytic-cfga.html&amp;quot; . }}

&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/custom.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also modified the Google Analytics integration in the same way. I copied the &amp;ldquo;analytic-gtag.html&amp;rdquo; file to my partials folder and added the attribute &amp;ldquo;anonymize_ip&amp;rdquo; to anonymize the IP address.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;...
        dataLayer.push(arguments);
    }
    gtag(&#39;js&#39;, new Date());
    gtag(&#39;config&#39;, &#39;{{ . }}&#39;, {&#39;anonymize_ip&#39;: true});
&amp;lt;/script&amp;gt;
&amp;lt;script async src=&amp;quot;https://www.googletagmanager.com/gtag/js?id={{ . }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To &lt;a href=&#34;https://github.com/amzrk2/hugo-theme-fuji/#-favicon&#34; target=&#34;_blank&#34;&gt;get a favicon&lt;/a&gt; I followed the instructions on my theme site doc.&lt;/p&gt;
&lt;p&gt;By default the the RSS feed generated will include only a summary (I HATE THAT) and return all items. I&amp;rsquo;ve found this &lt;a href=&#34;https://www.godo.dev/tutorials/hugo-full-text-rss/&#34; target=&#34;_blank&#34;&gt;post about solving my RSS &amp;ldquo;problem&amp;rdquo;&lt;/a&gt;. This time we had to grab the content from the hugo website and copy the file into &amp;ldquo;layouts/_default/rss.xml&amp;rdquo;. Switch from &amp;ldquo;.Summary&amp;rdquo; to &amp;ldquo;.Content&amp;rdquo; and switched the description of the RSS feed to my site descritpion. Also I configured the XML feed to only return 25 items.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;...
&amp;lt;description&amp;gt;{{.Site.Params.subTitle}}&amp;lt;/description&amp;gt;
...
&amp;lt;pubDate&amp;gt;{{ .Date.Format &amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot; | safeHTML }}&amp;lt;/pubDate&amp;gt;
{{ with .Site.Author.email }}&amp;lt;author&amp;gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&amp;lt;/author&amp;gt;{{end}}
&amp;lt;guid&amp;gt;{{ .Permalink }}&amp;lt;/guid&amp;gt;
&amp;lt;description&amp;gt;{{ .Content | html }}&amp;lt;/description&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-INI&#34;&gt;rssLimit = 25
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;content-migration&#34;&gt;Content migration&lt;/h3&gt;
&lt;p&gt;I also need to take care about my old content living on Tumblr and if possible on Wordpress. It was kind of easy. I checked the &lt;a href=&#34;https://gohugo.io/tools/migrations/&#34; target=&#34;_blank&#34;&gt;migration article on the Hugo docs&lt;/a&gt; site.&lt;/p&gt;
&lt;p&gt;Tumblr: &lt;a href=&#34;https://gohugo.io/tools/migrations/#tumblr&#34;&gt;https://gohugo.io/tools/migrations/#tumblr&lt;/a&gt;&lt;br/&gt;
All of the solutions require a Tumblr app registration so I created on. To not mess with my fresh Windows install I enabled WSL2 and used the Ubuntu distro. This way I was able to clone the &lt;a href=&#34;https://github.com/carlmjohnson/tumblr-importr&#34; target=&#34;_blank&#34;&gt;tumblr-importr&lt;/a&gt; repo and build my application. The important part was to place the GO binary into the right location. Otherwise the command was unknown. After that I was able to generate the needed files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-BASH&#34;&gt;git clone https://github.com/carlmjohnson/tumblr-importr
cd tumblr-importr
go build
sudo cp tumblr-importr $GOPATH/bin
tumblr-importr -api-key &#39;MYAPIKEYHERE&#39; -blog &#39;marcoscheel.de&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I copied the files into a subfolder named &amp;ldquo;tmblr&amp;rdquo; in my &amp;ldquo;content/post&amp;rdquo; folder. My main problem was that the content was not makrdown. The files used HTML. I ended up opening all the blog posts on tumblr in edit mode and switched to markdown mode and copied the source to the coresponding .md file. I only had 12 posts so the work was doable and the result is clean. The main benefit of the conversion was that the front-matter attributes were pregenerated I did not have to recreate those (title, old url as alias, tags, date, &amp;hellip;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-INI&#34;&gt;date = 2019-08-02T19:41:30Z
title = &amp;quot;Manage Microsoft Teams membership with Azure AD Access Review&amp;quot;
slug = &amp;quot;manage-microsoft-teams-membership-with-azure-ad&amp;quot;
id = &amp;quot;186728523052&amp;quot;
aliases = [ &amp;quot;/post/186728523052/manage-microsoft-teams-membership-with-azure-ad&amp;quot; ]
tags = [ &amp;quot;Microsoft365&amp;quot;, &amp;quot;AzureAD&amp;quot;, &amp;quot;Teams&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Tumblr export generated an image mapping JSON. I used the JSON (converted to a CSV) to rewrite my images to the downloaded (still to small) version.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-CSV&#34;&gt;&amp;quot;OldURI&amp;quot;:&amp;quot;NewURI&amp;quot;
&amp;quot;https://64.media.tumblr.com/023c5bd633c51521feede1808ee7fc20/eb22dd4fa3026290-d8/s540x810/36e4547d82122343bec6a09acf4075bb15eae1c1.png&amp;quot;: &amp;quot;tmblr/6b/23/64d506172093d1d548651e196cf7.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$images = Import-Csv -Delimiter &amp;quot;:&amp;quot; -Path &amp;quot;.\image-rewrites.csv&amp;quot;;

Get-ChildItem -Filter &amp;quot;*.md&amp;quot; -Recurse | ForEach-Object {
    $file = $_;
    $content = get-content -Path $file.FullName -Raw
    foreach ($image in $images) {
        $content = $content -replace $image.OldURI, $image.NewURI
    }
    Set-Content -Value $content -Path ($file.FullName)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wordpress: &lt;a href=&#34;https://gohugo.io/tools/migrations/#wordpress&#34;&gt;https://gohugo.io/tools/migrations/#wordpress&lt;/a&gt;&lt;br/&gt;
Once again I used my handy WSL2 instance to not mess with not loved language. So a save route was to use the Wordpress export feature and the repo &lt;a href=&#34;https://github.com/wooni005/exitwp-for-hugo&#34; target=&#34;_blank&#34;&gt;exitwp-for-hugo&lt;/a&gt;. I cloned the repo and a few sudo apt-get later I was ready to run the python script. I placed my downloaded XML into the &amp;ldquo;wordpress-xml&amp;rdquo; folder. I ended op changing the exitwp.py file to ignore all tags and replace it with a single &amp;ldquo;xArchived&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git clone https://github.com/wooni005/exitwp-for-hugo.git
cd exitwp-for-hugo
./exitwp.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end my &amp;ldquo;content/post&amp;rdquo; folder looks like to following.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;/img/20201011-my-blog-has-moved-hugo--hugo-content-posts.jpg&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;
&lt;p&gt;Now that the content is available on my local drive and I&amp;rsquo;m able to generate the static files. It is already a git repo so where to host the primary authority? So the hugo site with all config and logic will go to Github. There are only two choices for me. Github or Azure DevOps. Microsoft is owning both services. Private repos are free in both services. It looks like in the future Azure DevOps will not get all the love and thazt is why my website source code is hosted on Github: &lt;a href=&#34;https://github.com/marcoscheel/marcoscheel-de&#34;&gt;https://github.com/marcoscheel/marcoscheel-de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;/img/20201011-my-blog-has-moved-hugo--github-private.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;github-pages&#34;&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;Next up is to generate the final HTML and put it out there in the internet. Generating the content is as easy as running this command.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;/img/20201011-my-blog-has-moved-hugo--githubpages-hugo.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Now we need to make a decision how to host the content. My first try was to setup a new Azure Pay-As-You-Go subscription with a 200$ starting budget for the first month and my personal credit card from here. Based on &lt;a href=&#34;https://www.andrewconnell.com/blog/hosting-hugo-on-azure/&#34; target=&#34;_blank&#34;&gt;Andrew Connell blog&lt;/a&gt; I setup a storage account and enabled the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website&#34; target=&#34;_blank&#34;&gt;static website&lt;/a&gt;. I could setup a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/blobs/storage-custom-domain-name?tabs=azure-portal&#34; target=&#34;_blank&#34;&gt;custom domain&lt;/a&gt; for the blob store, but I created a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/cdn/cdn-create-new-endpoint&#34; target=&#34;_blank&#34;&gt;Azure CDN (MS Standard)&lt;/a&gt; to optimize traffic and reduce potential cost. I also checked for &lt;a href=&#34;https://www.cloudflare.com/plans/&#34; target=&#34;_blank&#34;&gt;CloudFlare CDN&lt;/a&gt;. All options allowed to have a custom domain and easy HTTPS with build in certificates. At the end it was my credit card and if something went really wrong (to much traffic due to non paid internt fame?) I would be paying a life lesson with real money. I took the easy route instead. Github Pages to the rescue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Websites for you and your projects. Hosted directly from your GitHub repository. Just edit, push, and your changes are live.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For every account Github is offering &lt;strong&gt;one&lt;/strong&gt; &lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34;&gt;Github Pages&lt;/a&gt; repository. I created the repository at: &lt;a href=&#34;https://github.com/marcoscheel/marcoscheel.github.io&#34;&gt;https://github.com/marcoscheel/marcoscheel.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normal the content will be server on the github.io domain, but through the settings we can add a CNAME to the site. To achive this we need to put a file called &amp;ldquo;CNAME&amp;rdquo; into the root directory. For my hugo site and the publish process I placed the file into the &amp;ldquo;static&amp;rdquo; folder so everytime the site is generated the file will be copied to the root of the site. Once the CNAME is in place we configure the HTTPS redirect.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;/img/20201011-my-blog-has-moved-hugo--githubpages-https.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Custom domain. HTTPS. No credit card. Everything is good.&lt;/p&gt;
&lt;h2 id=&#34;publishing&#34;&gt;Publishing&lt;/h2&gt;
&lt;p&gt;In the future I&amp;rsquo;m lokking forward to enable GitHub Actions to publish my site. For the moment I rely on my local environment pushing content from my hugo site to the GitHub Pages repository. I integrated the GitHub Pages repo as a submodule and with the publish process I put the files into &amp;ldquo;public/docs&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-INI&#34;&gt;publishDir = &amp;quot;public/docs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick &amp;ldquo;hugo&amp;rdquo; on the Windows Terminal and a fresh version is ready to be pushed into the right repo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zeit f√ºr einen Neustart</title>
      <link>/post/2016/05/143746644752-zeit-f%C3%BCr-einen-neustart/</link>
      <pubDate>Mon, 02 May 2016 17:30:19 +0000</pubDate>
      
      <guid>/post/2016/05/143746644752-zeit-f%C3%BCr-einen-neustart/</guid>
      <description>&lt;p&gt;Marco Scheel nach seinem Umzug von Wordpress zu Tumblr&lt;/p&gt;
&lt;p&gt;Das alte Zeug gibt es hier: &lt;a href=&#34;https://marcoscheel.wordpress.com/&#34; target=&#34;_blank&#34;&gt;https://marcoscheel.wordpress.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>