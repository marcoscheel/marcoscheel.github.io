<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure AD on Marco Scheel aka GeekDotNet</title><link>https://marcoscheel.de/tags/azure-ad/</link><description>Früher SharePoint. Heute Microsoft 365 Modern Collaboration. Co-Host of Hairless in the cloud.</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Mon, 25 Jan 2021 10:10:10 +0100</lastBuildDate><atom:link href="https://marcoscheel.de/tags/azure-ad/index.xml" rel="self" type="application/rss+xml"/><item><title>Create your Azure AD application via script - M365.TeamsBackup</title><link>https://marcoscheel.de/post/2021/01/20210124-m365teamsbackup-aadapp/</link><pubDate>Mon, 25 Jan 2021 10:10:10 +0100</pubDate><guid>https://marcoscheel.de/post/2021/01/20210124-m365teamsbackup-aadapp/</guid><description>&lt;p>If you are using Azure AD authentication for your scripts, apps, or other scenarios at some point you will end up creating your own application in your directory. Normally you open the Azure portal and navigate to the &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app" target="_blank">&amp;ldquo;App registrations&amp;rdquo;&lt;/a> part of AAD. This is fine during development, but if you want to share the solution or a customer wants to run the software in their own tenant, things get complicated and error prone. For my Microsoft Teams backup solution this is very real because you need to hit all required permissions and configure the public client part otherwise the solution will not run.&lt;/p>
&lt;p>This post provides you will all the needed information to create your own script. I&amp;rsquo;m using my &lt;a href="https://github.com/marcoscheel/M365.TeamsBackup" target="_blank">M365 Teams Backup&lt;/a> solution as a reference. The key components are:&lt;/p>
&lt;ul>
&lt;li>Install the Azure CLI or the Azure AD Preview PowerShell module&lt;/li>
&lt;li>The scripts to setup the app
&lt;ul>
&lt;li>&lt;a href="https://github.com/marcoscheel/M365.TeamsBackup/blob/main/deploy/create-aadapp-cli.ps1" target="_blank">create-aadapp-cli.ps1&lt;/a> via Azure CLI&lt;/li>
&lt;li>or &lt;a href="https://github.com/marcoscheel/M365.TeamsBackup/blob/main/deploy/create-aadapp.ps1" target="_blank">create-aadapp.ps1&lt;/a> via PowerShell&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img class="img-zoomable" src="https://marcoscheel.de/img/20210124-m365teamsbackup-aadapp--title.jpg" alt="image" />
&lt;/p>
&lt;h2 id="choose-a-scripting-environment-azure-cli-vs-azure-ad-ps">Choose a scripting environment (Azure CLI vs Azure AD PS)&lt;/h2>
&lt;p>During my day job I created some applications based on &lt;a href="https://docs.microsoft.com/en-us/graph/overview" target="_blank">Microsoft Graph&lt;/a> and I tried a few approaches to script the Azure AD app creation. It is important to understand that an Azure AD application consists of two parts. The application registration is like a blueprint for your app. The enterprise application is the implementation of your blueprint.&lt;/p>
&lt;p>The application permissions are defined in the &amp;ldquo;App registration&amp;rdquo;. Here you select the permissions that your app will request from users in the tenant. Without a consent the permissions are not in effect. If your only have an app registered but not received consent the app will not be able to use the requested permissions. Check the &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent" target="_blank">Microsoft documentation&lt;/a> for a deeper look at the consent framework.&lt;/p>
&lt;p>Most of my applications leverage &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#permission-types" target="_blank">application permissions&lt;/a> or require admin consent for delegate permissions. The �M365.TeamsBackup� solution is using a bunch of Microsoft Graph permissions and some of them are pretty powerful. If you have an application with this kind of permission requirements it is needed to have &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#admin-restricted-permissions" target="_blank">admin consent&lt;/a> given by a (best case) global administrator.&lt;/p>
&lt;p>If your apps are like mine, it might be the best to use the Azure CLI because this is as of my knowledge the only way to script the admin consent. I am not a CLI guy. I am a PowerShell fan. I struggled in the past integrating the CLI and its output into my scripting flow. That is why I wanted to show you what and how it can be done. If you are OK with opening the portal to give admin consent or you don&amp;rsquo;t want to give admin consent during application setup, I also have an Azure AD PowerShell version of the script.&lt;/p>
&lt;h3 id="setup-azure-cli-and-connect">Setup Azure CLI and connect&lt;/h3>
&lt;p>The Azure CLI is not purely targeted at Azure AD. It is the other way around because the CLI is used to script all the Azure things available. There is great Microsoft docs on &lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli" target="_blank">installing the Azure CLI&lt;/a>. I&amp;rsquo;m running on Windows, so I typically go the MSI route:&lt;/p>
&lt;ul>
&lt;li>Download the release version of the MSI (that is what I&amp;rsquo;m running)&lt;/li>
&lt;li>Install the MSI (bring some extra time because the installation is slow)&lt;/li>
&lt;li>After the download open a new PowerShell (this ensured the path is set and available)&lt;/li>
&lt;li>You can check if the installation worked using the &amp;lsquo;az &amp;ndash;version&amp;rsquo; command&lt;/li>
&lt;/ul>
&lt;p>&lt;img class="img-zoomable" src="https://marcoscheel.de/img/20210124-m365teamsbackup-aadapp--setup-cli.png" alt="image" />
&lt;/p>
&lt;p>As you can see my version is not up to date. As with most tools you need to keep these tools at the latest version. The Azure CLI can be updated by installing the newest MSI or by running an admin command using this command &amp;lsquo;az upgrade&amp;rsquo;. The upgrade command will download the MSI and start the installation for you.&lt;/p>
&lt;p>Installation is finish and now it is time to login to your tenant. The CLI is different from your normal &amp;ldquo;PowerShell Connect-SERVICE&amp;rdquo; (SharePoint, AD, Teams, &amp;hellip;) command. The Azure CLI will remember your last login. If you close and open your terminal you will still be logged in. If you use the Azure CLI just for the one-time setup, please consider a logout after you finish any script. But first lets login. I&amp;rsquo;m a big fan of &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-device-code" target="_blank">device code authentication&lt;/a> where possible. &lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli#run-the-azure-cli" target="_blank">Azure CLI is supporting&lt;/a> this flow so that is how I roll:&lt;/p>
&lt;ul>
&lt;li>Login:
&lt;ul>
&lt;li>az login &amp;ndash;use-device-code &amp;ndash;allow-no-subscriptions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Check current login:
&lt;ul>
&lt;li>az account show&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Logout:
&lt;ul>
&lt;li>az logout&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img class="img-zoomable" src="https://marcoscheel.de/img/20210124-m365teamsbackup-aadapp--setup-cliaccount.png" alt="image" />
&lt;/p>
&lt;p>Check my script using the Azure CLI:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/marcoscheel/M365.TeamsBackup/blob/main/deploy/create-aadapp-cli.ps1" target="_blank">create-aadapp-cli.ps1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="setup-azure-ad-powershell-and-connect">Setup Azure AD PowerShell and connect&lt;/h3>
&lt;p>Azure AD PowerShell versioning is complicated. For my job (M365 Modern Collaboration) I am always using the AzureADPreview module and this is what I recommend in most cases. The AzureADPreview cannot be installed side by side with the &lt;a href="https://docs.microsoft.com/en-us/powershell/module/azuread/?view=azureadps-2.0-preview" target="_blank">AzureADPreview&lt;/a>, so at some point you will have to move to the AzureADPreview. As the Azure CLI is not PowerShell based I am using my Windows Terminal default that is PowerShell 7. The Azure AD modules are not yet ready for PowerShell 7 so you will need to open your old school PowerShell 5.&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/powershell/azure/active-directory/install-adv2?view=azureadps-2.0-preview" target="_blank">Installing the Azure AD module&lt;/a> is like most modern modules and relies on the Powershell gallery.&lt;/p>
&lt;ul>
&lt;li>Open your PowerShell as an administrator and execute
&lt;ul>
&lt;li>Install-module AzureADPreview&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Check your version opening a non admin session
&lt;ul>
&lt;li>Get-Module AzureADPreview -ListAvailable&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img class="img-zoomable" src="https://marcoscheel.de/img/20210124-m365teamsbackup-aadapp--setup-ps.png" alt="image" />
&lt;/p>
&lt;p>If you are not on the latest version, you need to upgrade the module like any other module:&lt;/p>
&lt;ul>
&lt;li>Open your PowerShell as an administrator and execute
&lt;ul>
&lt;li>Update-Module AzureADPreview&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img class="img-zoomable" src="https://marcoscheel.de/img/20210124-m365teamsbackup-aadapp--setup-psupdate.png" alt="image" />
&lt;/p>
&lt;p>To connect to Azure AD you cannot rely on device authentication and you will need to login directly on the script execution. If you need to execute multiple scripts, check if you want to disable the login command &amp;ldquo;Connect-AzureAD&amp;rdquo; in the script to prevent multiple logins (incl. MFA).&lt;/p>
&lt;ul>
&lt;li>Open your PowerShell and execute
&lt;ul>
&lt;li>Connect-AzureAD&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Check my script using the Azure CLI:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/marcoscheel/M365.TeamsBackup/blob/main/deploy/create-aadapp.ps1" target="_blank">create-aadapp.ps1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="script-the-creation-process">Script the creation process&lt;/h2>
&lt;p>Now we are prepared, and we can create our application. The easy part is to create an &amp;ldquo;App registration&amp;rdquo;. If your app need permissions the trouble begins. There are two challenges:&lt;/p>
&lt;ul>
&lt;li>Setting the permission in the two scripts&lt;/li>
&lt;li>Getting the permission definition in the first place&lt;/li>
&lt;/ul>
&lt;p>Getting the permission translated from the nice Azure AD portal UX to a script-ready solution is harder to research than expected. I&amp;rsquo;ve done a &lt;a href="https://marcoscheel.de/post/2019/07/186138885112-app-permissions-f%C3%BCr-microsoft-graph-calls/" target="_blank">blog post&lt;/a> (in German) about this in the past. In the next section I will show you how to get the ID of the Microsoft Graph application and the IDs of the required permissions.&lt;/p>
&lt;p>My Teams Backup solution requires many permissions from the Microsoft Graph (this time delegation because app permissions for &lt;a href="https://docs.microsoft.com/en-us/graph/teams-protected-apis" target="_blank">some require Microsoft approval&lt;/a>) so let�s have a look at a non-error prone implementation that is also easy to read and extend.&lt;/p>
&lt;h3 id="azure-cli">Azure CLI&lt;/h3>
&lt;p>For reference: &lt;a href="https://github.com/marcoscheel/M365.TeamsBackup/blob/main/deploy/create-aadapp-cli.ps1" target="_blank">create-aadapp-cli.ps1&lt;/a>
Microsoft docs: &lt;a href="https://docs.microsoft.com/en-us/cli/azure/reference-index?view=azure-cli-latest" target="_blank">az command overview&lt;/a>&lt;/p>
&lt;p>Use the Azure CLI to query the Azure Active Directory for the service principal with the name of the Microsoft Graph.&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">$servicePrincipalName = &amp;quot;Microsoft Graph&amp;quot;;
$servicePrincipalId = az ad sp list --filter &amp;quot;displayname eq '$servicePrincipalName'&amp;quot; --query '[0].appId' | ConvertFrom-Json
&lt;/code>&lt;/pre>
&lt;p>Using the query parameter we select the first result (there is only one Microsoft Graph) and &amp;ldquo;cast&amp;rdquo; the app ID. Using the ConvertFrom-JSON makes it easy to parse the result and we receive &amp;ldquo;00000003-0000-0000-c000-000000000000&amp;rdquo; as the value for the app id.&lt;/p>
&lt;p>Next, we need to get the ID for each required permission. This info is part of the &amp;ldquo;oauth2Permissions&amp;rdquo; property from the MS Graph service principal:&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">$servicePrincipalNameOauth2Permissions = @(&amp;quot;Channel.ReadBasic.All&amp;quot;, &amp;quot;ChannelMember.Read.All&amp;quot;, &amp;quot;ChannelMessage.Read.All&amp;quot;, &amp;quot;ChannelSettings.Read.All&amp;quot;, &amp;quot;Group.Read.All&amp;quot;, &amp;quot;GroupMember.Read.All&amp;quot;, &amp;quot;Team.ReadBasic.All&amp;quot;, &amp;quot;TeamMember.Read.All&amp;quot;, &amp;quot;TeamSettings.Read.All&amp;quot;, &amp;quot;TeamsTab.Read.All&amp;quot;);
(az ad sp show --id $servicePrincipalId --query oauth2Permissions | ConvertFrom-Json) | ? { $_.value -in $servicePrincipalNameOauth2Permissions} | % {
$permission = $_
$delPermission = @{
id = $permission.Id
type = &amp;quot;Scope&amp;quot;
}
$reqGraph.resourceAccess += $delPermission
}
&lt;/code>&lt;/pre>
&lt;p>Using the &amp;ldquo;-in&amp;rdquo; filter we receive all specified entries for the array we need. To use the IDs in the next command the script creates a hashtable that can be converted in the needed JSON file (correct a file). The permissions are added as &amp;ldquo;Scope&amp;rdquo; representing &amp;ldquo;Delegation&amp;rdquo; permission. The &amp;ldquo;az ad app create&amp;rdquo; command will require a file with the permissions.&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">Set-Content ./required_resource_accesses.json -Value (&amp;quot;[&amp;quot; + ($reqGraph | ConvertTo-Json) + &amp;quot;]&amp;quot;)
$newapp = az ad app create --display-name $appName --available-to-other-tenants false --native-app true --required-resource-accesses `@required_resource_accesses.json | ConvertFrom-Json
&lt;/code>&lt;/pre>
&lt;p>This creates an app that is only valid in your tenant &amp;ldquo;&amp;ndash;available-to-other-tenants false&amp;rdquo; and allows the login as a public client &amp;ldquo;&amp;ndash;native-app true&amp;rdquo;. The result is a JSON representing the new application.&lt;/p>
&lt;p>The benefit of using the Azure CLI is the possibility to grant admin consent for the newly created app&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">az ad app permission admin-consent --id $newapp.appId
&lt;/code>&lt;/pre>
&lt;h3 id="powershell-with-azure-ad">PowerShell with Azure AD&lt;/h3>
&lt;p>For reference: &lt;a href="https://github.com/marcoscheel/M365.TeamsBackup/blob/main/deploy/create-aadapp.ps1" target="_blank">create-aadapp.ps1&lt;/a>
Microsoft docs: &lt;a href="https://docs.microsoft.com/en-us/powershell/module/azuread/?view=azureadps-2.0#applications" target="_blank">Azure AD Application command overview&lt;/a>&lt;/p>
&lt;p>To get the ID for the Microsoft Graph Service principal we query the current directory and filter to the display name.&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">$servicePrincipalName = &amp;quot;Microsoft Graph&amp;quot;;
$servicePrincipal = Get-AzureADServicePrincipal -All $true | ? { $_.DisplayName -eq $servicePrincipalName };
&lt;/code>&lt;/pre>
&lt;p>Where the Azure CLI requires a file to setup permission, the PowerShell version requires a .NET object. The Microsoft Graph service principal ID is the ResourceAppID.&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">$reqGraph = New-Object -TypeName &amp;quot;Microsoft.Open.AzureAD.Model.RequiredResourceAccess&amp;quot;;
$reqGraph.ResourceAppId = $servicePrincipal.AppId;
&lt;/code>&lt;/pre>
&lt;p>From the returned object we can select the &amp;ldquo;Oauth2Permissions&amp;rdquo; property to filter on our array with the required permissions. For each permission another .NET object is created and added to the collection named &amp;ldquo;ResourceAccess&amp;rdquo;.&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">$servicePrincipalNameOauth2Permissions = @(&amp;quot;Channel.ReadBasic.All&amp;quot;, &amp;quot;ChannelMember.Read.All&amp;quot;, &amp;quot;ChannelMessage.Read.All&amp;quot;, &amp;quot;ChannelSettings.Read.All&amp;quot;, &amp;quot;Group.Read.All&amp;quot;, &amp;quot;GroupMember.Read.All&amp;quot;, &amp;quot;Team.ReadBasic.All&amp;quot;, &amp;quot;TeamMember.Read.All&amp;quot;, &amp;quot;TeamSettings.Read.All&amp;quot;, &amp;quot;TeamsTab.Read.All&amp;quot;);
$servicePrincipal.Oauth2Permissions | ? { $_.Value -in $servicePrincipalNameOauth2Permissions} | % {
$permission = $_
$delPermission = New-Object -TypeName &amp;quot;Microsoft.Open.AzureAD.Model.ResourceAccess&amp;quot; -ArgumentList $permission.Id,&amp;quot;Scope&amp;quot; #delegate permission (oauth) are always &amp;quot;Scope&amp;quot;
$reqGraph.ResourceAccess += $delPermission
}
&lt;/code>&lt;/pre>
&lt;p>Now it is time to setup the application (only in this directory and as public client) and retrieve the ID of the new app:&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">New-AzureADApplication -DisplayName $appName -AvailableToOtherTenants:$false -PublicClient:$true -RequiredResourceAccess $reqGraph;
&amp;quot;ClientId: &amp;quot; + $newapp.AppId;
&amp;quot;TenantId: &amp;quot; + (Get-AzureADTenantDetail).ObjectId;
&amp;quot;Check AAD app: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/CallAnAPI/appId/&amp;quot; + $newapp.AppId + &amp;quot;/objectId/&amp;quot; + $newapp.ObjectId + &amp;quot;/isMSAApp/&amp;quot;;
&lt;/code>&lt;/pre>
&lt;p>The last line creates a link to the Azure AD to grant admin consent.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>You can check out my linked solution to get the full picture from the client code using the app to the setup required for authentication. I would recommend checking out the Azure CLI because it is the most complete solution even though it does not feel natural to me as a PowerShell guy. The example should give you an idea how to get the needed IDs and how to constructed the required objects/file to create the app. Let me know how you setup Azure AD apps and if there are other options. I&amp;rsquo;ve ignored the &lt;a href="https://docs.microsoft.com/en-us/powershell/module/az.resources/new-azadapplication" target="_blank">PowerShell AZ module&lt;/a> because you are not able to grant admin consent too and chances are higher you may have AzureAD PowerShell installed already.&lt;/p></description></item><item><title>Manage Microsoft Teams membership with Azure AD Access Review</title><link>https://marcoscheel.de/post/2019/08/186728523052-manage-microsoft-teams-membership-with-azure-ad/</link><pubDate>Fri, 02 Aug 2019 19:41:30 +0000</pubDate><guid>https://marcoscheel.de/post/2019/08/186728523052-manage-microsoft-teams-membership-with-azure-ad/</guid><description>&lt;p>This post will introduce you to the Azure AD Access Review feature. With the introduction of modern collaboration through Microsoft 365 and Microsoft Teams being the main tool it is important to mange who is a member to the underlying Office 365 Group (Azure AD Group).&lt;/p>
&lt;p>&amp;lt;DE&amp;gt;Für eine erhöhte Reichweite wird der Post heute auf Englisch erscheinen. Es geht um die Einführung von Access Reviews (Azure AD) im Zusammenspiel mit Microsoft Teams. Das Verwalten der Mitgliedschaft eines Teams wird durch den Einsatz von diesem Feature unterstützt und stellt die Besitzer weiter in den Mittelpunkt. Sollte großes Interesse an einer komplett deutschen Version bestehen, dann lasst es mich bitte wissen.&amp;lt;/DE&amp;gt;&lt;/p>
&lt;p>Microsoft has great &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/governance/access-reviews-overview" target="_blank">resources&lt;/a> to get started on a technical level. The feature enables a set of people to review another set of people. Azure AD is leveraging this capability (all under the bigger umbrella called &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/governance/identity-governance-overview" target="_blank">Identity Governance)&lt;/a> on two assets: Azure AD Groups and Azure AD Apps. Microsoft Teams as a hub for collaboration is build on top of Office 365 Groups and so we will have a closer look at the Access Review part for Azure AD Groups.&lt;/p>
&lt;p>Each Office 365 Group (each Team) is build from a set of owners and members. With the open nature of Office 365, members can be employees, contractors, or people outside of the organization.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/76/bd/e538a30288a1511ad21a1fa8800e.png" alt="image" />
&lt;/p>
&lt;p>In our modern collaboration (Teams, SharePoint, &amp;hellip;) implementation we strongly recommend to leverage full self service group creation that is already built into the system. With this setup everyone is able to create and manage/own a group. Permanent user education is needed for everyone to understand the concept behind modern groups. Many organizations also have a strong set of internal rules that forces a so called information owner (could be equal to the owner of a group) to review who has access to their data. Most organization rely on the fact people are fulfilling their duties as demanded, but lets face it owners are just human beings that need to do their “real” job. With the introduction of Azure AD Access Review we can support these owner duties and make the process documented and easy to execute.&lt;/p>
&lt;p>AAD Access Review can do the following to support an up to date group membership:&lt;/p>
&lt;ul>
&lt;li>Setup an Access Review for an Azure AD Group&lt;/li>
&lt;li>Specify the duration (start date, recurrence, duration, &amp;hellip;)&lt;/li>
&lt;li>Specify who will do the review (owner, self, specific people, &amp;hellip;)&lt;/li>
&lt;li>Specify who will be reviewed (all members, guests, &amp;hellip;)&lt;/li>
&lt;li>Specify what will happen if the review is not executed (remove members, &amp;hellip;)&lt;/li>
&lt;/ul>
&lt;p>Before we start we need to talk about licensing. It is obvious that M365 E5 is the best SKU to start with ;) but if you are not that lucky, you need at least an Azure AD P2 license. It is not a “very” common license as it was only part of the EMS E5 SKU, but Microsoft started some time ago &lt;a href="https://www.microsoft.com/en-us/microsoft-365/blog/2019/01/02/introducing-new-advanced-security-and-compliance-offerings-for-microsoft-365/" target="_blank">really attractive license bundles&lt;/a>. Many orgs with strong security requirements will at some point hit a license SKU that will include AAD P2. For your trusty lab tenants start a EMS E5 trial to test these features today. To be precise only the accounts reviewing (executing the Access Review) need the license, at least this is my understanding and as always with licensing ask your usual licensing people to get the definitive answer.&lt;/p>
&lt;p>The setup of an Access Review (if not automated through &lt;a href="https://docs.microsoft.com/en-us/graph/api/resources/accessreviews-root?view=graph-rest-beta" target="_blank">MS Graph&lt;/a> Beta) is setup in the Azure Portal in the &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/governance/access-reviews-overview#onboard-access-reviews" target="_blank">identity governance blade&lt;/a> of AAD. To create our first Access Review we need to on-board to this feature.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/a3/ad/cecc7fb97787e08c4f87f978dbc0.png" alt="image" />
&lt;/p>
&lt;p>Please note we are looking at Access Review in the context of modern collaboration (groups created by Teams, SharePoint, Outlook, &amp;hellip;). Access Review can be used to review any AAD group that you use to grant access to a specific resource or keep a list of trusted users for an infrastructure piece of tech in Azure. The following information might not always be valid for your scenario!&lt;/p>
&lt;p>This is the first half of the screen we need to fill-out for a new Access Review:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/b8/37/a8885e7c2352530bc0dc64f242e6.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Review name&lt;/strong>: This is a really important piece! The Review name will be the “only” visible clue for the reviewer once they get the email about the outstanding review. With self service setup and with the nature of how people name their groups we need to ensure people are understanding what they review. We try to automate the creation of the reviews so we put the review timing, the group name and the groups object id in the review name. The ID is helping during support if you send out 4000 Access Reviews and people ask why they got this email they can provide you with the ID and things get easier. For example: 2019-Q1 GRP New Order (af01a33c-df0b-4a97-a7de-c6954bd569ef)&lt;/p>
&lt;p>&lt;strong>Frequency&lt;/strong>: Also very important! You have to understand that an Access Review is somehow static. You could do a recurring review, but some information will be out of sync. For example the group could be renamed, but the title will not be updated and people might get confused about misleading information in the email that is send out. If you choose to let the owner of a group do the review, the owners will be “copied” to the Access Review config and not updated for future reviews. Technically this could be fixed by Microsoft, but as of now we ran into problems in the context of modern collaboration.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/43/67/e83f0e7133dbdea25ad0ab293014.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Users&lt;/strong>: &amp;ldquo;Members of a group” is our choice for collaboration. The other option is “Assigned to an application” and not our focus. For a group we have the option to do a guest only review or review everybody as a member of a group. Based on organizational needs and information like the confidentiality we can make a decision. As a starting point it could be a good option to go with guests only because guests are not very well controlled in most environments. An employee at least has a contract and the general trust level should be higher.&lt;/p>
&lt;p>&lt;strong>Group&lt;/strong>: Select a group the review should apply to. The latest changes to the Access Review feature allowed to select multiple groups at once. From a collaboration perspective I would avoid it, because at the end of the creation process each group will have its own Access Review instance and the settings are no longer shared. Once again from a collab point of view we need some kind of automation because it is not feasible to create these reviews by an manual task in a foreseeable future.&lt;/p>
&lt;p>&lt;strong>Reviewers&lt;/strong>: The natural choice for an Office 365 Group (Team) is to go with the “Group owners” option. Especially if we automate the process and don’t have an extra database to lookup who is the information owner. For static groups or highly confidential groups the option “Selected users” could make sense. An interesting option is also the last one called “Members (self)”. This option will &amp;ldquo;force” each member to take a decision if the user is any longer part of this project, team or group. We at &lt;a href="https://glueckkanja.com" target="_blank">Glück &amp;amp; Kanja&lt;/a> are currently thinking about doing this for some of our internal clients teams. Most of our groups are public and accessible by most of the employee, but membership will document some kind of current involvement for the client represented by the group. This could also naturally reduce the number of teams that show up in your Microsoft Teams client app. As mentioned earlier at the moment it seems that the option “Group owners” will be resolved once the Access Review starts and the instance of the review is then fixed. So any owner change could be not reflected in future instances in recurring reviews. Hopefully this will be fixed by Microsoft.&lt;/p>
&lt;p>&lt;strong>Program&lt;/strong>: This is a logical grouping of access reviews. For example we could add all collaboration related reviews to one program vs administration reviews with a more static route.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/81/2b/50d2ee022a8bf0412503f18d974d.png" alt="image" />
&lt;/p>
&lt;p>More advanced settings are collapsed, but should definitely be reviews.&lt;/p>
&lt;p>&lt;strong>Upon completion settings&lt;/strong>: Allows to automatically apply the review results. I would suggest to try this settings, because it will not only document the review but take the required action on the membership. If group owners are not aware what these Access Review email are, then we talk about potential loss of access for members not reviewed, but at the end that is what we want. People need to take this part of identity governance for real and take care of their data. Any change by the system is document (Audit log of the group) and can be reverse manually. If the system is not executing the results of the review, someone must look up results regularly and then ensure to remove the users based on the outcome. If you go for Access Review, I strongly recommend on automatically applying the results (after you own internal tests).&lt;/p>
&lt;p>Lets take a look on the created Access Review.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/8c/9d/2372c6b805906d8da4d8cedad814.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Azure Portal&lt;/strong>: This is an overview for the admin (non recurring access review).
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/28/60/d0b7362d036eb07d9b4310cbf592.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Email&lt;/strong>: As you can see the prominent Review name is what is standing out to the user. The group name (also highlighted red) is buried within all other text.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/b4/b4/92ec7111904b2875457c90a4959f.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Click on “Start Review” from the email&lt;/strong>: The user now can take action based on recommendations (missing in my lab tenant due to inactivity of my lab users).
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/c8/31/d612013164d7119004bbc1e078f5.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Take Review&lt;/strong>: Accept 6 users.&lt;/p>
&lt;p>&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/b3/14/91e4c324a1df66f16ebb9bfed94d.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Review Summary&lt;/strong>: This is the summary if the owner has taken all actions.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/1e/a2/61923832e72d07f5d077100ba3ee.png" alt="image" />
&lt;/p>
&lt;p>&lt;strong>Azure Portal&lt;/strong>: Audit log information for the group.&lt;/p>
&lt;p>After the user completed the review the system didn’t make a change to the group. Based on the configuration if actions should be automatically applied the results apply at the end of the review process! Until this time the owners can change their mind. Once the review period is over the system will apply the needed changes.&lt;/p>
&lt;p>I really love this feature in the context of modern collaboration. The process of keeping a current list of involved members in a team is a big benefit for productivity and security. The “need to know” principal is supported by a technical implementation “free of cost” (a mentioned everyone should have AAD P2 through some SKU 😎).&lt;/p>
&lt;p>Our GK O365 Lifecycle tool was extended to allow the creation of Access Reviews through the Microsoft Graph based on the Group/Team classification. Once customers read or get a demo about this feature and own the license we immediately start a POC implementation. If our tool is already in place it is only a matter of some JSON configuration to be up and running.&lt;/p></description></item><item><title>App Permissions für Microsoft Graph Calls automatisiert einrichten</title><link>https://marcoscheel.de/post/2019/07/186138885112-app-permissions-f%C3%BCr-microsoft-graph-calls/</link><pubDate>Mon, 08 Jul 2019 11:47:21 +0000</pubDate><guid>https://marcoscheel.de/post/2019/07/186138885112-app-permissions-f%C3%BCr-microsoft-graph-calls/</guid><description>&lt;p>Für unser Glück &amp;amp; Kanja Lifecycle Tool setze ich im Schwerpunkt auf Microsoft Graph Calls. Für ein sauberes Setup habe ich mittlerweile ein Script. Es nutzt die &lt;a href="https://docs.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-2.0.0" target="_blank">PowerShell AZ&lt;/a> und die &lt;a href="https://docs.microsoft.com/en-US/cli/azure/install-azure-cli?view=azure-cli-latest" target="_blank">Azure CLI&lt;/a>. Besonders beim Erstellen einer Azure AD App (genauer Berechtigen und Granten) ist die Azure CLI noch ein Stück besser bzw. umfangreicher als die AZ PowerShell.&lt;/p>
&lt;p>Die Lifecycle App arbeitet mit AD Settings und Groups. Erweiterte Funktionen setzen auf &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/governance/access-reviews-overview" target="_blank">Access Reviews&lt;/a> Feature aus dem AAD P2 Lizenzset. Diese Graph Berechtigungen setze ich direkt per CLI Script:&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">az ad app permission add --id $adapp.ApplicationId --api 00000003-0000-0000-c000-000000000000 --api-permissions 19dbc75e-c2e2-444c-a770-ec69d8559fc7=Role #msgraph Directory.ReadWrite.All
az ad app permission add --id $adapp.ApplicationId --api 00000003-0000-0000-c000-000000000000 --api-permissions 62a82d76-70ea-41e2-9197-370581804d09=Role #msgraph Group.ReadWrite.All
az ad app permission add --id $adapp.ApplicationId --api 00000003-0000-0000-c000-000000000000 --api-permissions ef5f7d5c-338f-44b0-86c3-351f46c8bb5f=Role #msgraph AccessReview.ReadWrite.All
az ad app permission add --id $adapp.ApplicationId --api 00000003-0000-0000-c000-000000000000 --api-permissions 60a901ed-09f7-4aa5-a16e-7dd3d6f9de36=Role #msgraph ProgramControl.ReadWrite.All
&lt;/code>&lt;/pre>
&lt;p>Die Azure CLI kann dann auch gleich noch den Admin Grant erledigen (wenn man nicht in der Azure Cloud Shell läuft!):&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">az ad app permission admin-consent --id $adapp.ApplicationId
&lt;/code>&lt;/pre>
&lt;p>Hier ein Beispiel, wie das Ergebnis dann im Azure AD Portal aussieht:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/94/b8/3d8dde919b99d6647aa15d89d175.png" alt="image" />
&lt;/p>
&lt;p>Wer nun die Guid für seine Berechtigung sucht, kann ganz einfach mit diesem Befehlt (&lt;a href="https://docs.microsoft.com/en-us/powershell/azure/active-directory/install-adv2?view=azureadps-2.0" target="_blank">Azure Active Directory PowerShell 2.0&lt;/a>) auf das ständig wachsende Set an App Permissions zugreifen:&lt;/p>
&lt;pre>&lt;code class="language-PowerShell">(Get-AzureADServicePrincipal -filter &amp;quot;DisplayName eq 'Microsoft Graph'&amp;quot;).AppRoles | Select Id, Value | Sort Value
Id Value
-- -----
d07a8cc0-3d51-4b77-b3b0-32704d1f69fa AccessReview.Read.All
ef5f7d5c-338f-44b0-86c3-351f46c8bb5f AccessReview.ReadWrite.All
18228521-a591-40f1-b215-5fad4488c117 AccessReview.ReadWrite.Membership
134fd756-38ce-4afd-ba33-e9623dbe66c2 AdministrativeUnit.Read.All
5eb59dd3-1da2-4329-8733-9dabdc435916 AdministrativeUnit.ReadWrite.All
1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9 Application.ReadWrite.All
18a4783c-866b-4cc7-a460-3d5e5662c884 Application.ReadWrite.OwnedBy
b0afded3-3588-46d8-8b3d-9842eff778da AuditLog.Read.All
798ee544-9d2d-430c-a058-570e29e34338 Calendars.Read
ef54d2bf-783f-4e0f-bca1-3210c0444d99 Calendars.ReadWrite
a7a681dc-756e-4909-b988-f160edc6655f Calls.AccessMedia.All
284383ee-7f6e-4e40-a2a8-e85dcb029101 Calls.Initiate.All
4c277553-8a09-487b-8023-29ee378d8324 Calls.InitiateGroupCall.All
f6b49018-60ab-4f81-83bd-22caeabfed2d Calls.JoinGroupCall.All
fd7ccf6b-3d28-418b-9701-cd10f5cd2fd4 Calls.JoinGroupCallAsGuest.All
7b2449af-6ccd-4f4d-9f78-e550c193f0d1 ChannelMessage.Read.All
4d02b0cc-d90b-441f-8d82-4fb55c34d6bb ChannelMessage.UpdatePolicyViolation.All
6b7d71aa-70aa-4810-a8d9-5d9fb2830017 Chat.Read.All
294ce7c9-31ba-490a-ad7d-97a7d075e4ed Chat.ReadWrite.All
7e847308-e030-4183-9899-5235d7270f58 Chat.UpdatePolicyViolation.All
089fe4d0-434a-44c5-8827-41ba8a0b17f5 Contacts.Read
6918b873-d17a-4dc1-b314-35f528134491 Contacts.ReadWrite
1138cb37-bd11-4084-a2b7-9f71582aeddb Device.ReadWrite.All
7a6ee1e7-141e-4cec-ae74-d9db155731ff DeviceManagementApps.Read.All
dc377aa6-52d8-4e23-b271-2a7ae04cedf3 DeviceManagementConfiguration.Read.All
2f51be20-0bb4-4fed-bf7b-db946066c75e DeviceManagementManagedDevices.Read.All
58ca0d9a-1575-47e1-a3cb-007ef2e4583b DeviceManagementRBAC.Read.All
06a5fe6d-c49d-46a7-b082-56b1b14103c7 DeviceManagementServiceConfig.Read.All
7ab1d382-f21e-4acd-a863-ba3e13f7da61 Directory.Read.All
19dbc75e-c2e2-444c-a770-ec69d8559fc7 Directory.ReadWrite.All
7e05723c-0bb0-42da-be95-ae9f08a6e53c Domain.ReadWrite.All
7c9db06a-ec2d-4e7b-a592-5a1e30992566 EduAdministration.Read.All
9bc431c3-b8bc-4a8d-a219-40f10f92eff6 EduAdministration.ReadWrite.All
4c37e1b6-35a1-43bf-926a-6f30f2cdf585 EduAssignments.Read.All
6e0a958b-b7fc-4348-b7c4-a6ab9fd3dd0e EduAssignments.ReadBasic.All
0d22204b-6cad-4dd0-8362-3e3f2ae699d9 EduAssignments.ReadWrite.All
f431cc63-a2de-48c4-8054-a34bc093af84 EduAssignments.ReadWriteBasic.All
e0ac9e1b-cb65-4fc5-87c5-1a8bc181f648 EduRoster.Read.All
0d412a8c-a06c-439f-b3ec-8abcf54d2f96 EduRoster.ReadBasic.All
d1808e82-ce13-47af-ae0d-f9b254e6d58a EduRoster.ReadWrite.All
38c3d6ee-69ee-422f-b954-e17819665354 ExternalItem.ReadWrite.All
01d4889c-1287-42c6-ac1f-5d1e02578ef6 Files.Read.All
75359482-378d-4052-8f01-80520e7db3cd Files.ReadWrite.All
5b567255-7703-4780-807c-7be8301ae99b Group.Read.All
62a82d76-70ea-41e2-9197-370581804d09 Group.ReadWrite.All
e321f0bb-e7f7-481e-bb28-e3b0b32d4bd0 IdentityProvider.Read.All
90db2b9a-d928-4d33-a4dd-8442ae3d41e4 IdentityProvider.ReadWrite.All
6e472fd1-ad78-48da-a0f0-97ab2c6b769e IdentityRiskEvent.Read.All
db06fb33-1953-4b7b-a2ac-f1e2c854f7ae IdentityRiskEvent.ReadWrite.All
dc5007c0-2d7d-4c42-879c-2dab87571379 IdentityRiskyUser.Read.All
656f6061-f9fe-4807-9708-6a2e0934df76 IdentityRiskyUser.ReadWrite.All
19da66cb-0fb0-4390-b071-ebc76a349482 InformationProtectionPolicy.Read.All
810c84a8-4a9e-49e6-bf7d-12d183f40d01 Mail.Read
e2a3a72e-5f79-4c64-b1b1-878b674786c9 Mail.ReadWrite
b633e1c5-b582-4048-a93e-9f11b44c7e96 Mail.Send
40f97065-369a-49f4-947c-6a255697ae91 MailboxSettings.Read
6931bccd-447a-43d1-b442-00a195474933 MailboxSettings.ReadWrite
658aa5d8-239f-45c4-aa12-864f4fc7e490 Member.Read.Hidden
3aeca27b-ee3a-4c2b-8ded-80376e2134a4 Notes.Read.All
0c458cef-11f3-48c2-a568-c66751c238c0 Notes.ReadWrite.All
c1684f21-1984-47fa-9d61-2dc8c296bb70 OnlineMeetings.Read.All
b8bb2037-6e08-44ac-a4ea-4674e010e2a4 OnlineMeetings.ReadWrite.All
0b57845e-aa49-4e6f-8109-ce654fffa618 OnPremisesPublishingProfiles.ReadWrite.All
b528084d-ad10-4598-8b93-929746b4d7d6 People.Read.All
246dd0d5-5bd0-4def-940b-0421030a5b68 Policy.Read.All
79a677f7-b79d-40d0-a36a-3e6f8688dd7a Policy.ReadWrite.TrustFramework
eedb7fdd-7539-4345-a38b-4839e4a84cbd ProgramControl.Read.All
60a901ed-09f7-4aa5-a16e-7dd3d6f9de36 ProgramControl.ReadWrite.All
230c1aed-a721-4c5d-9cb4-a90514e508ef Reports.Read.All
5e0edab9-c148-49d0-b423-ac253e121825 SecurityActions.Read.All
f2bf083f-0179-402a-bedb-b2784de8a49b SecurityActions.ReadWrite.All
bf394140-e372-4bf9-a898-299cfc7564e5 SecurityEvents.Read.All
d903a879-88e0-4c09-b0c9-82f6a1333f84 SecurityEvents.ReadWrite.All
a82116e5-55eb-4c41-a434-62fe8a61c773 Sites.FullControl.All
0c0bf378-bf22-4481-8f81-9e89a9b4960a Sites.Manage.All
332a536c-c7ef-4017-ab91-336970924f0d Sites.Read.All
9492366f-7969-46a4-8d15-ed1a20078fff Sites.ReadWrite.All
21792b6c-c986-4ffc-85de-df9da54b52fa ThreatIndicators.ReadWrite.OwnedBy
fff194f1-7dce-4428-8301-1badb5518201 TrustFrameworkKeySet.Read.All
4a771c9a-1cf2-4609-b88e-3d3e02d539cd TrustFrameworkKeySet.ReadWrite.All
405a51b5-8d8d-430b-9842-8be4b0e9f324 User.Export.All
09850681-111b-4a89-9bed-3f2cae46d706 User.Invite.All
df021288-bdef-4463-88db-98f22de89214 User.Read.All
741f803b-c850-494e-b5df-cde7c675a1ca User.ReadWrite.All
&lt;/code>&lt;/pre></description></item><item><title>Microsoft Graph, Postman und Wie bekomme ich ein App Only Token?</title><link>https://marcoscheel.de/post/2019/07/185978935612-microsoft-graph-postman-und-wie-bekomme-ich-ein/</link><pubDate>Mon, 01 Jul 2019 15:06:23 +0000</pubDate><guid>https://marcoscheel.de/post/2019/07/185978935612-microsoft-graph-postman-und-wie-bekomme-ich-ein/</guid><description>&lt;p>Der Microsoft Graph ist das “Schweizer Taschenmesser” für alle im Microsoft 365 Umfeld. Eine API für “alle” Dienste und noch besser immer das gleiche Authentifizierungsmodel. Im &lt;a href="https://hairlessinthecloud.com" target="_blank">Hairless in the Cloud&lt;/a> Podcast Nummer &lt;a href="https://anchor.fm/hairlessinthecloud/episodes/018---Wir-kennen-die-Passwrter-Eurer-User-und-Microsoft-Graph-e42di4/a-aff2ff" target="_blank">18&lt;/a> habe ich meine Eindrücke zum Microsoft Graph schon geschildert. Der Graph Explorer auf der Website ist eine gute Methode den Graph kennenzulernen. Ich für meinen Teil bewege mich aber überwiegend ohne Benutzerinteraktion im Graph und somit nutze ich in meinen Anwendungen die Application Permissions. Die meisten APIs (vgl. Teams) kommen allerdings erstmal ohne App Permissions daher. Die Enttäuschung ist groß, wenn man über den Graph Explorer sein Research gemacht hat und dann feststellt, dass die Calls als App Permission scheitern.&lt;/p>
&lt;p>Jeremy Thake aus dem Microsoft Graph Team hat vor einigen Monaten angefangen, die Samples (und mehr) aus dem &lt;a href="https://developer.microsoft.com/en-us/graph/blogs/postman-collections/" target="_blank">Graph Explorer in einer Collection für Postman&lt;/a> zu veröffentlichen. Diese Collection vereinfacht das Testen der eigenen Calls und gibt Anregung für neue Szenarien.&lt;/p>
&lt;p>In der Vergangenheit habe ich mir aus meiner Azure Function das Token “geklaut” und dann im Postman als Bearer Token direkt hinterlegt:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/cd/ef/cad14ee0d8e93c6d3b12f08d7601.png" alt="image" />
&lt;/p>
&lt;p>Es gibt aber eine viel elegantere Version. Die MS Graph Postman Collection arbeitet mit dem Environment und Variablen. Eine Methode, die eigentlich dem Code in der eigene App (bei mir eine Azure Function) entspricht, ist aber auch mit an Bord. Postman bietet eine native OAuth Integration an. Man wählt einfach OAuth 2.0 aus und kann dann folgende Informationen aus seiner eigenen App hinterlegen:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/21/e1/721b47c47bd4e280e0ec33f5be11.png" alt="image" />
&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Grant Type: Client Credentials&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Access Token URL: h&lt;a href="https://login.microsoftonline.com/malachor.onmicrosoft.com/oauth2/v2.0/token" target="_blank">ttps://login.microsoftonline.com/malachor.onmicrosoft.com/oauth2/v2.0/token
&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Client ID: 50641771-73ac-42fa-9b6f-f25e49ec6871&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Client Secret: dvMR0c_&lt;em>_RlxvV&lt;/em>JQQZGDICH6N04ZT2/&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scope : &lt;a href="https://graph.microsoft.com/.default" target="_blank">https://graph.microsoft.com/.default&lt;/a>
Wenn man immer alle Scopes/Berechtigungen möchte, dann ist dieser Scope der einfachste&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Hinweis&lt;/strong>: Ich habe meine App schon wieder gelöscht. Sie ist nicht länger nutzbar, also ist das Secret im Code auch kein Geheimnis mehr.&lt;/p>
&lt;p>Über “Request Token” kann ich dann ein Token holen und für alle weiteren Requests verwenden. Zum Prüfen des Token (hat der Scope geklappt) kann man einfach auf &lt;a href="https://jwt.io" target="_blank">jwt.io&lt;/a> oder auf den Microsoft Service &lt;a href="https://jwt.ms" target="_blank">jwt.ms&lt;/a> gehen.&lt;/p>
&lt;p>&lt;strong>Hinweis&lt;/strong>: Solche Token Decoder sind eine tolle Sache, aber bitte denkt dran, wenn ihr das mit produktiven Token macht, dann müsst ihr dem Service vertrauen, denn er hat in dem Moment eure Berechtigung! In meinem Fall könnten die beiden Websites das Token nehmen und gegen meinen Tenant einsetzen! Ich nutze hier mein LAB Tenant und ich glaube, dass ich weiß was ich tue :) Also alles gut!
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/80/c6/4831a031ee016dc13a15e68ab9cc.png" alt="image" />
&lt;/p>
&lt;p>Mit dem Token kann man dann zum Beispiel in meinem Fall die Azure AD Access Reviews einsehen.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/a4/93/1d391adb4162ec6255ed6d53579f.png" alt="image" />
&lt;/p>
&lt;p>Mein Debugging wurde extrem vereinfacht, da ich so einfach meine App Permissions testen kann.&lt;/p></description></item><item><title>SharePoint Online Device Access Option fehlt - Lösung: First Release for everyone</title><link>https://marcoscheel.de/post/2017/09/165449521992-sharepoint-online-device-access-option-fehlt/</link><pubDate>Sun, 17 Sep 2017 21:11:09 +0000</pubDate><guid>https://marcoscheel.de/post/2017/09/165449521992-sharepoint-online-device-access-option-fehlt/</guid><description>&lt;p>In meinen Projekten (&lt;a href="https://www.glueckkanja.com/technologien/office-365/" target="_blank">Office 365&lt;/a> / &lt;a href="https://www.glueckkanja.com/blog/microsoft/ems/award/2017/06/gk-partner-of-the-year/" target="_blank">100% Cloud&lt;/a>) ist &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/active-directory-conditional-access-technical-reference" target="_blank">Conditional Access&lt;/a> (CA) nicht mehr wegzudenken. Für uns “SharePoint“ Leute hat CA eine spezielle Geschmacksrichtung. Eine der ersten Session-Based CA Policies arbeitet mit SharePoint und ermöglicht so zusätzliche Kontrollen beim Zugriff auf SharePoint. Microsoft hat das ganze in einem &lt;a href="https://techcommunity.microsoft.com/t5/SharePoint-Blog/Device-based-Conditional-Access-Policies-Rolling-out-to-First/ba-p/51912" target="_blank">Blogpost&lt;/a> beschrieben. Jetzt wurde angekündigt, dass es in die nächste Runde geht und die Konfiguration nicht mehr auf den ganzen Tenant zieht, sondern &lt;a href="https://techcommunity.microsoft.com/t5/SharePoint-Blog/Device-based-Policies-Updates-with-SharePoint-and-OneDrive/ba-p/101827" target="_blank">einzelne Site Collections &lt;/a>adressiert. In diesem Zuge wollte ich mal wieder meine AAD + SPO Konfiguration gerade ziehen, aber siehe da&amp;hellip; es fehlt was! So sieht es im SharePoint Admin Center unter dem Punkt “Device Access” aus:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/44/60/b19d1309eb9d2f84b06d45a2bcd3.png" alt="image" />
&lt;/p>
&lt;p>Eigentlich sollte der Dialog so aussehen:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/f5/a7/e82673d65fdeb9ee1164a68a30ac.png" alt="image" />
&lt;/p>
&lt;p>Es fehlt der entscheidende Teil:
&lt;em>&amp;ldquo;Control access from devices that aren&amp;rsquo;t compliant or joined to a domain&amp;rdquo;&lt;/em>
oder auf deutsch:
_&amp;ldquo;Zugriff von Geräten steuern, die nicht konform oder einer Domäne beigetreten sind&amp;rdquo;
_Jetzt stellt sich die Frage warum? Mein Tenant ist auf “First Release”, also sollte es doch funktionieren. Eine kurze Recherche hat mich zum überraschenden Ergebnis geführt:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/60/a6/a0ab32d60f0b1ba4117644d161f6.png" alt="image" />
&lt;/p>
&lt;p>Quelle: Microsoft Support - &lt;a href="https://support.office.com/en-us/article/Control-access-from-unmanaged-devices-5ae550c4-bd20-4257-847b-5c20fb053622?ui=en-US&amp;amp;amp;rs=en-US&amp;amp;amp;ad=US&amp;amp;amp;fromAR=1" target="_blank">Control access from unmanaged devices&lt;/a>&lt;/p>
&lt;p>Mein Tenant war tatsächlich für einen Test auf die Option “First release for selected users” eingestellt:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/45/dc/754fb60365a39769a1e4c673639a.png" alt="image" />
&lt;/p>
&lt;h2 id="lösung">Lösung&lt;/h2>
&lt;p>Wie im Support Dokument beschrieben habe ich das Setting geändert auf die Option “First release for everyone”:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/71/99/e2bd1b48168c253805f8609aeeae.png" alt="image" />
&lt;/p>
&lt;p>Kurze Zeit später (es zieht nicht sofort), konnte ich über das SharePoint Admin Center die gewünschte &amp;ldquo;Device Access” Konfiguration abschließen.&lt;/p>
&lt;p>Ich habe in der Vergangenheit immer nach den Unterschieden der beiden “First Release” Einstellungen gesucht. Dieser Fall ist der erste mir bekannte.&lt;/p></description></item></channel></rss>