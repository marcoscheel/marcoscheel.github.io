<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on Marco Scheel aka GeekDotNet</title><link>https://marcoscheel.de/tags/tools/</link><description>Früher SharePoint. Heute Microsoft 365 Modern Collaboration. Co-Host of Hairless in the cloud.</description><generator>Hugo -- gohugo.io</generator><language>de</language><lastBuildDate>Mon, 01 Jul 2019 15:06:23 +0000</lastBuildDate><atom:link href="https://marcoscheel.de/tags/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Microsoft Graph, Postman und Wie bekomme ich ein App Only Token?</title><link>https://marcoscheel.de/post/2019/07/185978935612-microsoft-graph-postman-und-wie-bekomme-ich-ein/</link><pubDate>Mon, 01 Jul 2019 15:06:23 +0000</pubDate><guid>https://marcoscheel.de/post/2019/07/185978935612-microsoft-graph-postman-und-wie-bekomme-ich-ein/</guid><description>&lt;p>Der Microsoft Graph ist das “Schweizer Taschenmesser” für alle im Microsoft 365 Umfeld. Eine API für “alle” Dienste und noch besser immer das gleiche Authentifizierungsmodel. Im &lt;a href="https://hairlessinthecloud.com" target="_blank">Hairless in the Cloud&lt;/a> Podcast Nummer &lt;a href="https://anchor.fm/hairlessinthecloud/episodes/018---Wir-kennen-die-Passwrter-Eurer-User-und-Microsoft-Graph-e42di4/a-aff2ff" target="_blank">18&lt;/a> habe ich meine Eindrücke zum Microsoft Graph schon geschildert. Der Graph Explorer auf der Website ist eine gute Methode den Graph kennenzulernen. Ich für meinen Teil bewege mich aber überwiegend ohne Benutzerinteraktion im Graph und somit nutze ich in meinen Anwendungen die Application Permissions. Die meisten APIs (vgl. Teams) kommen allerdings erstmal ohne App Permissions daher. Die Enttäuschung ist groß, wenn man über den Graph Explorer sein Research gemacht hat und dann feststellt, dass die Calls als App Permission scheitern.&lt;/p>
&lt;p>Jeremy Thake aus dem Microsoft Graph Team hat vor einigen Monaten angefangen, die Samples (und mehr) aus dem &lt;a href="https://developer.microsoft.com/en-us/graph/blogs/postman-collections/" target="_blank">Graph Explorer in einer Collection für Postman&lt;/a> zu veröffentlichen. Diese Collection vereinfacht das Testen der eigenen Calls und gibt Anregung für neue Szenarien.&lt;/p>
&lt;p>In der Vergangenheit habe ich mir aus meiner Azure Function das Token “geklaut” und dann im Postman als Bearer Token direkt hinterlegt:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/cd/ef/cad14ee0d8e93c6d3b12f08d7601.png" alt="image" />
&lt;/p>
&lt;p>Es gibt aber eine viel elegantere Version. Die MS Graph Postman Collection arbeitet mit dem Environment und Variablen. Eine Methode, die eigentlich dem Code in der eigene App (bei mir eine Azure Function) entspricht, ist aber auch mit an Bord. Postman bietet eine native OAuth Integration an. Man wählt einfach OAuth 2.0 aus und kann dann folgende Informationen aus seiner eigenen App hinterlegen:
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/21/e1/721b47c47bd4e280e0ec33f5be11.png" alt="image" />
&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Grant Type: Client Credentials&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Access Token URL: h&lt;a href="https://login.microsoftonline.com/malachor.onmicrosoft.com/oauth2/v2.0/token" target="_blank">ttps://login.microsoftonline.com/malachor.onmicrosoft.com/oauth2/v2.0/token
&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Client ID: 50641771-73ac-42fa-9b6f-f25e49ec6871&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Client Secret: dvMR0c_&lt;em>_RlxvV&lt;/em>JQQZGDICH6N04ZT2/&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scope : &lt;a href="https://graph.microsoft.com/.default" target="_blank">https://graph.microsoft.com/.default&lt;/a>
Wenn man immer alle Scopes/Berechtigungen möchte, dann ist dieser Scope der einfachste&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Hinweis&lt;/strong>: Ich habe meine App schon wieder gelöscht. Sie ist nicht länger nutzbar, also ist das Secret im Code auch kein Geheimnis mehr.&lt;/p>
&lt;p>Über “Request Token” kann ich dann ein Token holen und für alle weiteren Requests verwenden. Zum Prüfen des Token (hat der Scope geklappt) kann man einfach auf &lt;a href="https://jwt.io" target="_blank">jwt.io&lt;/a> oder auf den Microsoft Service &lt;a href="https://jwt.ms" target="_blank">jwt.ms&lt;/a> gehen.&lt;/p>
&lt;p>&lt;strong>Hinweis&lt;/strong>: Solche Token Decoder sind eine tolle Sache, aber bitte denkt dran, wenn ihr das mit produktiven Token macht, dann müsst ihr dem Service vertrauen, denn er hat in dem Moment eure Berechtigung! In meinem Fall könnten die beiden Websites das Token nehmen und gegen meinen Tenant einsetzen! Ich nutze hier mein LAB Tenant und ich glaube, dass ich weiß was ich tue :) Also alles gut!
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/80/c6/4831a031ee016dc13a15e68ab9cc.png" alt="image" />
&lt;/p>
&lt;p>Mit dem Token kann man dann zum Beispiel in meinem Fall die Azure AD Access Reviews einsehen.
&lt;img class="img-zoomable" src="https://marcoscheel.de/tmblr/a4/93/1d391adb4162ec6255ed6d53579f.png" alt="image" />
&lt;/p>
&lt;p>Mein Debugging wurde extrem vereinfacht, da ich so einfach meine App Permissions testen kann.&lt;/p></description></item></channel></rss>